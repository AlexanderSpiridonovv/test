{
	
	"for": {
		"prefix": "for",
		"body": [
			"for(size_t ${1:i} = ${2:0}; ${1:i} < ${3:length}; ${1:i}++)",
			"{",
			"   $4",
			"}"
		],
		"description": "Code snippet for 'for' loop"
		},
		"forr": {
		"prefix": "forr",
		"body": [
			"for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)",
			"{",
			"    $3",
			"}"
		],
		"description": "Code snippet for reverse 'for' loop"
	},

		"forrange": {
			"prefix": "foreach",
			"body": [
				"for(const auto& ${1:element} : ${2:container} )",
				"{",
				"   $4",
				"}"
			],
			"description": "Code snippet for 'for range' loop"
			},
		"do": {
			"prefix": "do",
			"body": [
				"do",
				"{",
				"   $1",
				"}while($2);"
			],
			"description": "Code snippet for do...while loop"
		},
		"while": {
			"prefix": "while",
			"body": [
				"while($1)",
				"{",
				"   $2",
				"}"
			],
			"description": "Code snippet for while loop"
		},
		"foreach": {
			"prefix": "foreach",
			"body": [
				"for(auto& ${var} : ${collection_to_loop})",
				"{",
				"   $1",
				"}"
			],
			"description": "Code snippet for range-based for loop statement"
		},
		"if": {
			"prefix": "if",
			"body": [
				"if($1)",
				"{",
				"   $2",
				"}"
			],
			"description": "Code snippet for if statement"
		},
		"else": {
			"prefix": "else",
			"body": [
				"else",
				"{",
				"   $1",
				"}"
			],
			"description": "Code snippet for else statement"
		},
		"else if": {
			"prefix": "else if",
			"body": [
				"else if($1)",
				"{",
				"   $2",
				"}"
			],
			"description": "Code snippet for else-if statement"
		},
		"enum": {
			"prefix": "enum",
			"body": [
				"enum ${MyEnum}",
				"{",
				"   $1",
				"};"
			],
			"description": "Code snippet for enum"
		},
		"enum class": {
			"prefix": "enum class",
			"body": [
				"enum class ${MyClass}",
				"{",
				"   $1",
				"};"
			],
			"description": "Code snippet for enum class"
		},
		"class": {
		"prefix": "class",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"    ${MyClass}();",
			"    ${MyClass}(${MyClass} &&) = default;",
			"    ${MyClass}(const ${MyClass} &) = default;",
			"    ${MyClass} &operator=(${MyClass} &&) = default;",
			"    ${MyClass} &operator=(const ${MyClass} &) = default;",
			"    ~${MyClass}();",
			"",
			"private:",
			"    $1",
			"};",
			"",
			"    ${MyClass}::${MyClass}()",
			"    {",
			"    }",
			"",
			"    ${MyClass}::~${MyClass}()",
			"    {",
			"    }"
		],
		"description": "Code snippet for class"
	},
	"classi": {
		"prefix": "classi",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"    ${MyClass}() = default;",
			"    ${MyClass}(${MyClass} &&) = default;",
			"    ${MyClass}(const ${MyClass} &) = default;",
			"    ${MyClass} &operator=(${MyClass} &&) = default;",
			"    ${MyClass} &operator=(const ${MyClass} &) = default;",
			"    ~${MyClass}() = default;",
			"",
			"private:",
			"    $1",
			"};"
		],
		"description": "Code snippet for class with inline constructor/destructor"
	},
	"interface": {
		"prefix": "interface",
		"body": [
			"__interface I${Interface}",
			"{",
			"    $1",
			"};"
		],
		"description": "Code snippet for interface (Visual C++)"
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(int argc, const char** argv) {",
			"    return 0;",
			"}"
		],
		"description": "Code snippet for main function"
	},
		"namespace": {
			"prefix": "namespace",
			"body": [
				"namespace ${MyNamespace}",
				"{",
				"   $1",
				"} // ${MyNamespace}"
			],
			"description": "Code snippet for namespace"
		},
		"struct": {
			"prefix": "struct",
			"body": [
				"struct ${MyStruct}",
				"{",
				"   $1",
				"};"
			],
			"description": "Code snippet for struct"
		},
		"switch": {
			"prefix": "switch",
			"body": [
				"switch(${switch_on})",
				"{",
				"   case $1:",
				"   {",
				"   }",
				"   default:",
				"       break;",
				"}"
			],
			"description": "Code snippet for switch statement"
		},
		"try": {
			"prefix": "try",
			"body": [
				"try",
				"{",
				"   ",
				"}",
				"catch(const std::exception&)",
				"{",
				"   $1",
				"}"
			],
			"description": "Code snippet for try catch"
		},
		"lambda": {
			"prefix": "lambda",
			"body": [
				"auto ${lambda_name} = [&](${args})",
				"{",
				"   $1",
				"};"
			],
			"description": "Code snippet for lambda expression"
		},
		"unique_ptr": {
			"prefix": "unique_ptr",
			"body": [
				"std::unique_ptr<${Type}> ${ptr_name} = std::make_unique<${Type}>(${args});"
			],
			"description": "Code snippet for unique_ptr"
		},
		"shared_ptr": {
			"prefix": "shared_ptr",
			"body": [
				"std::shared_ptr<${Type}> ${ptr_name} = std::make_shared<${Type}>(${args});"
			],
			"description": "Code snippet for shared_ptr"
		},
		"pair": {
			"prefix": "pair",
			"body": [
				"std::pair<${Type1}, ${Type2}> ${pair_name}(${arg1}, ${arg2});"
			],
			"description": "Code snippet for std::pair"
		},
		"tuple": {
			"prefix": "tuple",
			"body": [
				"std::tuple<${Type1}, ${Type2}, ${Type3}> ${tuple_name}(${arg1}, ${arg2}, ${arg3});"
			],
			"description": "Code snippet for std::tuple"
		}
}